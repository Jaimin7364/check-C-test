{
  "title": "🚀 C Project Test Automation Report",
  "generated": "2025-09-24 09:55:39",
  "model_name": "llama-3.3-70b-versatile",
  "execution_time_seconds": 2.308198,
  "status": "SUCCESS",
  "changed_files": [
    "main.c",
    "reports/c_run_summary.txt"
  ],
  "compilation_status": {
    "main.c": true,
    "generated_test_file": true
  },
  "analyzed_functions": [
    {
      "name": "add",
      "file_path": "main.c",
      "line_start": 1,
      "line_end": 5,
      "return_type": "int",
      "parameters": [
        {
          "type": "int",
          "name": "a"
        },
        {
          "type": "int",
          "name": "b"
        },
        {
          "type": "int",
          "name": "c"
        }
      ],
      "is_static": false,
      "is_extern": false,
      "complexity_score": 1,
      "code_snippet": "#include <stdio.h>\n\nint add(int a, int b, int c) {\n    return a + b + c;\n}"
    },
    {
      "name": "main",
      "file_path": "main.c",
      "line_start": 5,
      "line_end": 18,
      "return_type": "int",
      "parameters": [],
      "is_static": false,
      "is_extern": false,
      "complexity_score": 1,
      "code_snippet": "}\n\nint main() {\n    int num1, num2, num3, result;\n    \n    printf(\"Enter three numbers: \");\n    scanf(\"%d %d %d\", &num1, &num2, &num3);\n    \n    result = add(num1, num2, num3);\n    \n    printf(\"Sum: %..."
    }
  ],
  "test_results": {
    "status": "success",
    "output": "[==========] tests: Running 5 test(s).\n[ RUN      ] test_add_normal\n[       OK ] test_add_normal\n[ RUN      ] test_add_negative\n[       OK ] test_add_negative\n[ RUN      ] test_add_zero\n[       OK ] test_add_zero\n[ RUN      ] test_add_large\n[       OK ] test_add_large\n[ RUN      ] test_add_small\n[       OK ] test_add_small\n[==========] tests: 5 test(s) run.\n",
    "stderr": "[  PASSED  ] 5 test(s).\nlibgcov profiling error:/home/runner/work/check-C-test/check-C-test/tests_pr/pr_generated_tests.gcda:overwriting an existing profile data with a different timestamp\n",
    "test_cases": [
      {
        "name": "test_add_normal",
        "status": "PASS",
        "execution_time": 0.0,
        "error_message": "",
        "failure_reason": "",
        "test_method": "test_add_normal",
        "explanation": "Tests add functionality with specific input conditions"
      },
      {
        "name": "test_add_negative",
        "status": "PASS",
        "execution_time": 0.0,
        "error_message": "",
        "failure_reason": "",
        "test_method": "test_add_negative",
        "explanation": "Tests add with negative values"
      },
      {
        "name": "test_add_zero",
        "status": "PASS",
        "execution_time": 0.0,
        "error_message": "",
        "failure_reason": "",
        "test_method": "test_add_zero",
        "explanation": "Tests behavior with zero values"
      },
      {
        "name": "test_add_large",
        "status": "PASS",
        "execution_time": 0.0,
        "error_message": "",
        "failure_reason": "",
        "test_method": "test_add_large",
        "explanation": "Tests add with maximum/large values"
      },
      {
        "name": "test_add_small",
        "status": "PASS",
        "execution_time": 0.0,
        "error_message": "",
        "failure_reason": "",
        "test_method": "test_add_small",
        "explanation": "Tests add with minimum/small values"
      }
    ],
    "coverage": {
      "line_coverage": 100.0,
      "function_coverage": 100.0,
      "branch_coverage": 0.0,
      "files": {
        "main.c": {
          "file": "main.c",
          "total_lines": 0,
          "covered_lines": 0,
          "line_coverage": 0.0
        }
      },
      "summary": "No coverage data available",
      "html_report": "/home/runner/work/check-C-test/check-C-test/coverage/html/index.html",
      "total_lines": 25,
      "covered_lines": 25,
      "total_functions": 7,
      "covered_functions": 7
    }
  },
  "test_cases": [
    {
      "name": "test_add_normal",
      "status": "PASS",
      "execution_time": 0.0,
      "error_message": "",
      "failure_reason": "",
      "test_method": "test_add_normal",
      "explanation": "Tests add functionality with specific input conditions"
    },
    {
      "name": "test_add_negative",
      "status": "PASS",
      "execution_time": 0.0,
      "error_message": "",
      "failure_reason": "",
      "test_method": "test_add_negative",
      "explanation": "Tests add with negative values"
    },
    {
      "name": "test_add_zero",
      "status": "PASS",
      "execution_time": 0.0,
      "error_message": "",
      "failure_reason": "",
      "test_method": "test_add_zero",
      "explanation": "Tests behavior with zero values"
    },
    {
      "name": "test_add_large",
      "status": "PASS",
      "execution_time": 0.0,
      "error_message": "",
      "failure_reason": "",
      "test_method": "test_add_large",
      "explanation": "Tests add with maximum/large values"
    },
    {
      "name": "test_add_small",
      "status": "PASS",
      "execution_time": 0.0,
      "error_message": "",
      "failure_reason": "",
      "test_method": "test_add_small",
      "explanation": "Tests add with minimum/small values"
    }
  ],
  "coverage_metrics": {
    "line_coverage": 100.0,
    "function_coverage": 100.0,
    "branch_coverage": 0.0,
    "files": {
      "main.c": {
        "file": "main.c",
        "total_lines": 0,
        "covered_lines": 0,
        "line_coverage": 0.0
      }
    },
    "summary": "No coverage data available",
    "html_report": "/home/runner/work/check-C-test/check-C-test/coverage/html/index.html",
    "total_lines": 25,
    "covered_lines": 25,
    "total_functions": 7,
    "covered_functions": 7
  },
  "execution_logs": [
    "[2025-09-24 09:55:37] [INFO] 🚀 Starting C Project Test Automation",
    "[2025-09-24 09:55:37] [INFO] 📁 Detected 2 changed files: main.c, reports/c_run_summary.txt",
    "[2025-09-24 09:55:37] [INFO] 🔍 Analyzing C file: main.c",
    "[2025-09-24 09:55:37] [INFO] ✅ Found 2 functions in main.c",
    "[2025-09-24 09:55:37] [INFO] 📊 C Function Analysis Summary:",
    "[2025-09-24 09:55:37] [INFO]    Total Functions: 2",
    "[2025-09-24 09:55:37] [INFO]    Static Functions: 0",
    "[2025-09-24 09:55:37] [INFO]    Average Complexity: 1.0/10",
    "[2025-09-24 09:55:37] [INFO] 🧠 Generating C test cases using llama-3.3-70b-versatile...",
    "[2025-09-24 09:55:37] [INFO] 🤖 Generating C test code (attempt 1/3)...",
    "[2025-09-24 09:55:38] [SUCCESS] ✅ Generated valid-looking C test code",
    "[2025-09-24 09:55:38] [SUCCESS] ✅ Generated and saved C tests to /home/runner/work/check-C-test/check-C-test/tests_pr/pr_generated_tests.c",
    "[2025-09-24 09:55:38] [INFO] 🏃 Compiling and executing C tests...",
    "[2025-09-24 09:55:38] [INFO] 🔨 Compiling C tests from /home/runner/work/check-C-test/check-C-test/tests_pr/pr_generated_tests.c",
    "[2025-09-24 09:55:38] [INFO] 🔧 Compilation command: gcc -std=c99 -Wall -Wextra -g --coverage -fprofile-arcs -ftest-coverage /home/runner/work/check-C-test/check-C-test/tests_pr/pr_generated_tests.c -lcmocka -lgcov -o /home/runner/work/check-C-test/check-C-test/tests_pr/pr_generated_tests -I /home/runner/work/check-C-test/check-C-test",
    "[2025-09-24 09:55:39] [SUCCESS] ✅ Compilation successful",
    "[2025-09-24 09:55:39] [INFO] 🧪 Executing C tests: /home/runner/work/check-C-test/check-C-test/tests_pr/pr_generated_tests",
    "[2025-09-24 09:55:39] [INFO] 📊 Generating code coverage reports...",
    "[2025-09-24 09:55:39] [INFO] 📊 Found version-specific gcov: gcov-11",
    "[2025-09-24 09:55:39] [INFO] 📊 Using gcov tool: gcov-11",
    "[2025-09-24 09:55:39] [INFO] 📊 Generating coverage for main.c...",
    "[2025-09-24 09:55:39] [SUCCESS] ✅ Coverage generated for main.c",
    "[2025-09-24 09:55:39] [SUCCESS] ✅ HTML coverage report generated",
    "[2025-09-24 09:55:39] [SUCCESS] ✅ All tests passed"
  ]
}